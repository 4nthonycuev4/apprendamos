req <ref *2> IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: [],
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      dataEmitted: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 9
      },
      _server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 9
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *2],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular *1],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        statusCode: 200,
        flush: [Function: flush],
        write: [Function (anonymous)],
        end: [Function (anonymous)],
        on: [Function: on],
        writeHead: [Function: writeHead],
        status: [Function (anonymous)],
        send: [Function (anonymous)],
        json: [Function (anonymous)],
        redirect: [Function (anonymous)],
        setPreviewData: [Function (anonymous)],
        clearPreviewData: [Function (anonymous)],
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype]
      },
      [Symbol(async_id_symbol)]: 335727,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers: {
      host: 'localhost:3000',
      connection: 'keep-alive',
      'cache-control': 'max-age=0',
      'upgrade-insecure-requests': '1',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'sec-fetch-site': 'cross-site',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-user': '?1',
      'sec-fetch-dest': 'document',
      'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="99", "Google Chrome";v="99"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'es-ES,es;q=0.9',
      cookie: '_xsrf=2|79b81ad0|7211ba5577f6a37573e25e3f1d71d402|1645810388; username-localhost-8888="2|1:0|10:1645810690|23:username-localhost-8888|44:ZWRjNDQxNmFjOTE1NGVjN2JjMjAyNjUxN2QyZTVkMWQ=|e1d31a33c48536f5172050f9f4d9eda797622d0dce64c4545a13d5dc6a189e08"; accept_cookies=accepted; nonce=FpFXbHmjungV8QKeDMMSbPyD043BLZcisFaojsTxfIc.8XXEfjyQ7mzO9maQ8Qm3f7R0v3d-3pAT2ezN4OGi9Es; state=eyJyZXR1cm5UbyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCJ9.wETZf5eRLvTXhDZvZaRXXuHyVYGJD94qM5pisCF3500; code_verifier=rLPdrY2K31p1asvtMpQKErdz0bPN8A4wAfMbsT6axGs.N21MLo6eQ0HnH_aD9T4z5wGv5mkEPCWnCw0Li9uZwwU'
    },
    rawHeaders: [
      'Host',
      'localhost:3000',
      'Connection',
      'keep-alive',
      'Cache-Control',
      'max-age=0',
      'Upgrade-Insecure-Requests',
      '1',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'Sec-Fetch-Site',
      'cross-site',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-User',
      '?1',
      'Sec-Fetch-Dest',
      'document',
      'sec-ch-ua',
      '" Not A;Brand";v="99", "Chromium";v="99", "Google Chrome";v="99"',
      'sec-ch-ua-mobile',
      '?0',
      'sec-ch-ua-platform',
      '"Windows"',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'es-ES,es;q=0.9',
      'Cookie',
      '_xsrf=2|79b81ad0|7211ba5577f6a37573e25e3f1d71d402|1645810388; username-localhost-8888="2|1:0|10:1645810690|23:username-localhost-8888|44:ZWRjNDQxNmFjOTE1NGVjN2JjMjAyNjUxN2QyZTVkMWQ=|e1d31a33c48536f5172050f9f4d9eda797622d0dce64c4545a13d5dc6a189e08"; accept_cookies=accepted; nonce=FpFXbHmjungV8QKeDMMSbPyD043BLZcisFaojsTxfIc.8XXEfjyQ7mzO9maQ8Qm3f7R0v3d-3pAT2ezN4OGi9Es; state=eyJyZXR1cm5UbyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCJ9.wETZf5eRLvTXhDZvZaRXXuHyVYGJD94qM5pisCF3500; code_verifier=rLPdrY2K31p1asvtMpQKErdz0bPN8A4wAfMbsT6axGs.N21MLo6eQ0HnH_aD9T4z5wGv5mkEPCWnCw0Li9uZwwU'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/api/auth/callback?code=KVvH1Mktsaa-TS2FuE1RKOPhTBogWc26zyuAEza26eUe5&state=eyJyZXR1cm5UbyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCJ9',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 9
      },
      _server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 9
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [Circular *2],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: ServerResponse {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        outputData: [],
        outputSize: 0,
        writable: true,
        destroyed: false,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        _defaultKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular *1],
        _header: null,
        _keepAliveTimeout: 5000,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        statusCode: 200,
        flush: [Function: flush],
        write: [Function (anonymous)],
        end: [Function (anonymous)],
        on: [Function: on],
        writeHead: [Function: writeHead],
        status: [Function (anonymous)],
        send: [Function (anonymous)],
        json: [Function (anonymous)],
        redirect: [Function (anonymous)],
        setPreviewData: [Function (anonymous)],
        clearPreviewData: [Function (anonymous)],
        [Symbol(kCapture)]: false,
        [Symbol(kNeedDrain)]: false,
        [Symbol(corked)]: 0,
        [Symbol(kOutHeaders)]: [Object: null prototype]
      },
      [Symbol(async_id_symbol)]: 335727,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: false,
    _dumped: false,
    cookies: [Getter/Setter],
    query: {
      code: 'KVvH1Mktsaa-TS2FuE1RKOPhTBogWc26zyuAEza26eUe5',
      state: 'eyJyZXR1cm5UbyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCJ9',
      auth0: [ 'callback' ]
    },
    previewData: [Getter/Setter],
    preview: [Getter/Setter],
    body: '',
    [Symbol(kCapture)]: false,
    [Symbol(RequestTimeout)]: undefined,
    [Symbol(NextRequestMeta)]: {
      __NEXT_INIT_URL: 'http://localhost:3000/api/auth/callback?code=KVvH1Mktsaa-TS2FuE1RKOPhTBogWc26zyuAEza26eUe5&state=eyJyZXR1cm5UbyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCJ9',
      __NEXT_INIT_QUERY: {
        code: 'KVvH1Mktsaa-TS2FuE1RKOPhTBogWc26zyuAEza26eUe5',
        state: 'eyJyZXR1cm5UbyI6Imh0dHA6Ly9sb2NhbGhvc3Q6MzAwMCJ9'
      },
      __nextHadTrailingSlash: undefined
    }
  }
  res <ref *2> ServerResponse {
    _events: [Object: null prototype] {
      finish: [Function: bound resOnFinish],
      pipe: [Function: bound onceWrapper] { listener: [Function (anonymous)] }
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: [],
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        errored: null,
        closed: false,
        closeEmitted: false,
        defaultEncoding: 'utf8',
        awaitDrainWriters: null,
        multiAwaitDrain: false,
        readingMore: false,
        dataEmitted: false,
        decoder: null,
        encoding: null,
        [Symbol(kPaused)]: false
      },
      _events: [Object: null prototype] {
        end: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        drain: [Function: bound socketOnDrain],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause]
      },
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        afterWriteTickInfo: null,
        buffered: [],
        bufferedIndex: 0,
        allBuffers: true,
        allNoop: true,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        errored: null,
        closed: false,
        closeEmitted: false
      },
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 9
      },
      _server: Server {
        maxHeaderSize: undefined,
        insecureHTTPParser: undefined,
        _events: [Object: null prototype],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 0,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 60000,
        requestTimeout: 0,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function: IncomingMessage],
        [Symbol(ServerResponse)]: [Function: ServerResponse],
        [Symbol(kCapture)]: false,
        [Symbol(async_id_symbol)]: 9
      },
      parser: HTTPParser {
        '0': [Function: bound setRequestTimeout],
        '1': [Function: parserOnHeaders],
        '2': [Function: parserOnHeadersComplete],
        '3': [Function: parserOnBody],
        '4': [Function: parserOnMessageComplete],
        '5': [Function: bound onParserExecute],
        '6': [Function: bound onParserTimeout],
        _headers: [],
        _url: '',
        socket: [Circular *1],
        incoming: [IncomingMessage],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
      },
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular *2],
      [Symbol(async_id_symbol)]: 335727,
      [Symbol(kHandle)]: TCP {
        reading: true,
        onconnection: null,
        _consumed: true,
        [Symbol(owner_symbol)]: [Circular *1]
      },
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    _sent100: false,
    _expect_continue: false,
    statusCode: 200,
    flush: [Function: flush],
    write: [Function (anonymous)],
    end: [Function (anonymous)],
    on: [Function: on],
    writeHead: [Function: writeHead],
    status: [Function (anonymous)],
    send: [Function (anonymous)],
    json: [Function (anonymous)],
    redirect: [Function (anonymous)],
    setPreviewData: [Function (anonymous)],
    clearPreviewData: [Function (anonymous)],
    [Symbol(kCapture)]: false,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] { 'set-cookie': [ 'Set-Cookie', [Array] ] }
  }
  session Session {
    user: {
      nickname: 'risog41068',
      name: 'risog41068@tonaeto.com',
      picture: 'https://s.gravatar.com/avatar/8773ef74623a1396c4f457741e0a4d00?s=480&r=pg&d=https%3A%2F%2Fcdn.auth0.com%2Favatars%2Fri.png',
      updated_at: '2022-03-18T20:39:19.128Z',
      sub: 'auth0|6234ebf4cd1229006a1e2c31'
    },
    idToken: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImdYZVZ5R2ZqUktKUVU3UmhTUWl6aiJ9.eyJuaWNrbmFtZSI6InJpc29nNDEwNjgiLCJuYW1lIjoicmlzb2c0MTA2OEB0b25hZXRvLmNvbSIsInBpY3R1cmUiOiJodHRwczovL3MuZ3JhdmF0YXIuY29tL2F2YXRhci84NzczZWY3NDYyM2ExMzk2YzRmNDU3NzQxZTBhNGQwMD9zPTQ4MCZyPXBnJmQ9aHR0cHMlM0ElMkYlMkZjZG4uYXV0aDAuY29tJTJGYXZhdGFycyUyRnJpLnBuZyIsInVwZGF0ZWRfYXQiOiIyMDIyLTAzLTE4VDIwOjM5OjE5LjEyOFoiLCJpc3MiOiJodHRwczovL2ZsYXNoY2FyZHMtcGUudXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYyMzRlYmY0Y2QxMjI5MDA2YTFlMmMzMSIsImF1ZCI6Ik91cGNWb1pwOUlVTWpNdkZrd3NxYndzcENrejNQWTFuIiwiaWF0IjoxNjQ3NjM1OTYwLCJleHAiOjE2NDc2NzE5NjAsIm5vbmNlIjoiRnBGWGJIbWp1bmdWOFFLZURNTVNiUHlEMDQzQkxaY2lzRmFvanNUeGZJYyJ9.MPvM-Xzf99vPF5m3MIlO0LVhJpWbZqUb8-YWLCuysUG2Ltg-RWzpN-cMvKKn1O9wdqO9p3xySEO5jcm5Uha5a_bV3IUgCJPqHNZkFm7rQecGOwnhvOxENYFwPexSxVl7UEjmg9ZdXT9y6mqp20aekndlJBOxpQbFt7RKGy7jAZFesVxpUl-7WJ0HHh-2cek2tNNpGJsT_e2qR_KkYIYSdACPVX7YFZxGl-mx_pTyB9h0hFD5SnlHgwJ8QyVBSTdycN4ByZPRlLSzn6iwS1zEy_C1lBMBn1-Lk6OKqsJJXhbFY8AmVZ8gEAyLZtYVDvLHKt56QTtVjMrP_GMS0OJ2EQ',
    accessToken: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImdYZVZ5R2ZqUktKUVU3UmhTUWl6aiJ9.eyJpc3MiOiJodHRwczovL2ZsYXNoY2FyZHMtcGUudXMuYXV0aDAuY29tLyIsInN1YiI6ImF1dGgwfDYyMzRlYmY0Y2QxMjI5MDA2YTFlMmMzMSIsImF1ZCI6WyJodHRwczovL2RiLmZhdW5hLmNvbS9kYi95MW55dHJybjF5cnJ5IiwiaHR0cHM6Ly9mbGFzaGNhcmRzLXBlLnVzLmF1dGgwLmNvbS91c2VyaW5mbyJdLCJpYXQiOjE2NDc2MzU5NjAsImV4cCI6MTY0NzcyMjM2MCwiYXpwIjoiT3VwY1ZvWnA5SVVNak12Rmt3c3Fid3NwQ2t6M1BZMW4iLCJzY29wZSI6Im9wZW5pZCBwcm9maWxlIn0.xIwTRZWYwv18-hGScZSHHyxGMuXp2r1iSnyHZL0WkASaj_0ZG7t0s7F6Kjbxi5HGB33lfYM2CT3PjDw8SD8_wo3nBZdA3yw9aNN9rueFBClD3pWJqhEgq1LyzVe3MRFk1V7Ylv3qkzJIGjuu_Rc5qwuNOBwSzbQzzdCh-onxzdNUgxzrLJDmwrhgbYVEYdFNSBF6yFZicgKjNY2ix3slthQwON2PueuPIvg4p_D0ab4Mklt7vhxmhW1zsgDePjFcDDVI9LzsHVbHMUbMr76UyV_IAr_fQr0UWN4VKp5y96GxqLfD3r4Ce0VZhTAdX0QqcDhvPHp93M2moMM42ysoCg',
    accessTokenScope: 'openid profile',
  LJDmwrhgbYVEYdFNSBF6yFZicgKjNY2ix3slthQwON2PueuPIvg4p_D0ab4Mklt7vhxmhW1zsgDePjFcDDVI9LzsHVbHMUbMr76UyV_IAr_fQr0UWN4VKp5y96GxqLfD3r4Ce0VZhTAdX0QqcDhvPHp93M2moMM42ysoCg',
    accessTokenScope: 'openid profile',
    accessTokenExpiresAt: 1647722360,
    refreshToken: undefined,
    token_type: 'Bearer'
  }
  state { returnTo: 'http://localhost:3000' }